package genetic;

import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
import java.util.Random;
import java.util.Arrays;
import java.io.*;
import java.math.BigInteger;

import genetic.csv.*;
import genetic.data.*;
import genetic.mutation.*;
import genetic.gene.*;

public class Main
{
	static DistanceTable distanceTable;
	static int t_c	=	0;
	static Gene gene;

	private static class cmp implements Comparator<Gene>
	{
		public int compare(Gene g1, Gene g2)
		{
			Integer i1 = new Integer(g1.getTotalNextDistance());
			return i1.compareTo(new Integer(g2.getTotalNextDistance()));
		}
	}

	static class foo implements Runnable{
		@Override
			public void run() {
				try
				{
					System.out.println("Thread start : "+t_c);

				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
	}

	public static void main(String[] args) throws Exception
	{
		ClassSystem system = new ClassSystem(args[0]);
		system.selectSemester(2013, 1);

		gene = ClassManager.getInstance().makeGene();
		for(t_c = 10; t_c < 20; t_c++)
		{
					Gene[] parent = new Gene[100];

					parent[0] = gene;

					for(int i=1; i<parent.length/10; i++)
					{
						RandomArrayAdaptor rA = new RandomArrayAdaptor();
						rA.setGene(parent[0]);
						parent[i] = rA.mutate(100);
						//System.out.print("a");
						//	if(i % 10 == 0)
						//		System.out.println("");		
					}

					for(int i=parent.length/10; i<parent.length/2; i++)
					{
						RandomArrayAdaptor rA = new RandomArrayAdaptor();
						rA.setGene(parent[0]);

						if(i%4 == 0)
							parent[i] = rA.mutate(10);
						if(i%4 == 1)
							parent[i] = rA.mutate(20);
						if(i%4 == 2)
							parent[i] = rA.mutate(30);
						if(i%4 == 3)
							parent[i] = rA.mutate(40);

						//	System.out.print("r");
						//	if(i % 10 == 0)
						//		System.out.println("");		
					}

					for(int i=parent.length/2; i<parent.length; i++)
					{
						GreedyAdaptor gA = new GreedyAdaptor();
						gA.setGene(gene);
						parent[i] = gA.mutate(10);
						//	System.out.print("g");
						//	if(i % 10 == 0)
						//		System.out.println("");		
					}


					for(int i=0; i<100; i++)
					{
						BufferedWriter out = new BufferedWriter(new FileWriter("./result/result"+t_c+"/generation_1st_"+ i + ".csv"));

						for(int j=0; j<100; j++)
						{
							GreedyAdaptor gA = new GreedyAdaptor();
							gA.setGene(parent[i]);
							//System.out.print(j);
							parent[i] = gA.mutate(100);
							String str = j + "," + parent[i].getTotalNextDistance() + ",";
							out.write(str); out.newLine();
							//			System.out.println(str);
						}

						out.close();
					}

					Gene[] crossover = new Gene[200];


					HashSet<Integer> rd_set = new HashSet<>();
					HashSet<Integer> rd_greedy_set = new HashSet<>();
					Random rd = new Random();

					for(int i=0; i<200; i++)
					{
						int n = rd.nextInt(100);
						int m = rd.nextInt(100);
						MutationAdaptor mA = new MutationAdaptor();
						crossover[i] = mA.mutate(parent[n], parent[m], 50);
					}

					Gene[] generation = new Gene[300];
					for(int i=0; i<100; i++)
						generation[i] = parent[i];
					for(int i=0; i<200; i++)
						generation[i+100] = crossover[i];

					BufferedWriter pool = new BufferedWriter(new FileWriter("./result/result"+t_c+"/pool" + ".csv"));

					for(int j=0; j<300; j++)
					{
						String str = j + "," + generation[j].getTotalNextDistance() + ",";
						pool.write(str); pool.newLine();
						//System.out.println(str);
					}

					pool.close();

					for(int count = 0; count < 100; count++)	//new generation
					{
						BufferedWriter out2 = new BufferedWriter(new FileWriter("./result/result"+t_c+"/generation" + (count+1) + ".csv"));
						//		System.out.println("generation : " + (count + 1));
						rd_set.clear();

						Arrays.sort(generation , new cmp());

						Gene[] tmp = new Gene[300];
						for(int i=0; i<75; i++)
						{
							tmp[i] = generation[i];
							rd_set.add(i);
						}

						int tmp_i = 75;
						while(rd_set.size() < 100)
						{
							int rd_num = rd.nextInt(300);
							if(rd_set.contains(rd_num)) continue;
							rd_set.add(rd_num);	

							tmp[tmp_i++] = generation[rd_num];

							//System.out.print(".");
							//				if(tmp_i % 10 == 0)
							//					System.out.println("");		
						}

						HashSet<Integer> rd_hash = new HashSet<Integer>();
						for(int i=100; i<300; i++)
						{
							int n, m;
							do
							{
								n = rd.nextInt(300);
								m = rd.nextInt(300);
							}while((rd_hash.contains(n) || rd_hash.contains(m)));

							rd_hash.add(n); rd_hash.add(m);

							MutationAdaptor mA = new MutationAdaptor();
							tmp[i] = mA.mutate(generation[n], generation[m], 50);
						}

						for(int i=0; i<100; i++)
							generation[i] = tmp[i];


						Arrays.sort(generation, new cmp());
						int t = 0;
						for(Gene _gene : generation)
						{
							String str = ((++t) + "," + _gene.getTotalNextDistance() + ",");
							//				System.out.println(str);
							out2.write(str); out2.newLine();
						}
						//			System.out.println("===");
						out2.close();
					}

		}
	}
}
